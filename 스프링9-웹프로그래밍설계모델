스프링 MVC 프레임워크 기반의 웹 프로그래밍 구조에 대해서 학습한다.
스프링MVC 프레임워크 설계 구조
1. 브라우저(클라이언트) -> DispatcherServlet
	클라이언트가 어떤 요청을 하면 DispatcherServlet이 요청을 받는다.
2. DispatcherServlet -> HandlerMapping
	받은 요청을 HandlerMapping한테 던진다.
	HandlerMapping은 많은 컨트롤러 중에서 적합한 컨트롤러를 선택하는 역할을 한다.
3-1. DispatcherServlet -> HandlerAdapter
	HandlerAdapter는 컨트롤러 내의 많은 매소드 중 가장 적합한 메소드를 찾아준다.
3-2. HandlerAdapter -> Controller
	Control 객체의 메소드를 실행
3-3. Controller -> HandlerAdapter
	HandlerAdapter 객체에 Model And View 객체를 반환한다.
	Model And View 객체에는 가공된 데이터와 jsp 정보가 포함된다.
4. DispatcherServlet -> ViewResolver
	가공된 데이터로부터 가장 적합한 jsp문서를 찾아준다.
5. DispatcherServlet -> View
	선택된 jsp 문서로 간다.
6. View -> 브라우저(클라이언트)
	브라우저에 응답내용을 표시한다.
	
DispatcherServlet 설정
web.xml에 서블릿을 매핑
	<servlet>
		<servlet-name>appServlet[서블릿 별칭]</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet[패키지 명을 전부 포함한 전체서블릿명</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		<init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/<url-pattern>
	</servlet-mapping>
	
	init-param을 설정하지 않는다면 자동으로 appServlet-context.xml 파일에 생성된다.
	단, appServlet-context.xml 파일이 반드시 있어야 한다.

@Controller
@Controller 어노테이션을 이용해서 일반적인 클래스를 컨트롤러 객체로 지정할 수 있다.
단, @Controller를 사용하기 위해서는 servlet-context.xml 파일에 
<annotation-driven/> 태그를 반드시 사용해야 한다.

@RequestMapping
@RequestMapping을 사용하여 컨트롤러 객체 안에 있는 특정한 메소드를 동작시킬 수 있다.
메소드 위에 @RequestMapping를 붙여주고 특정 이름을 명시해준다.
예를들어 http://localhost:8080/~~/~~/abc 인경우
@RequestMapping("/abc") 이렇게 사용하여 특정 문자를 매핑하여 매소드가 실행된다.
즉, RequestMapping 옆에 붙은 특정문자는 클라이언트가 요청한 요청 경로이며
DispatcherServlet이 이 특정문자가 붙은 @RequestMapping를 찾기위해
HandlerMapping을 이용하여 컨트롤러를 찾고, HandlerAdapter를 이용하여 메소드를 실행시킨다. 

 
컨트롤러에서 작업이 끝나고 DispatcherServlet에 모델, 뷰 데이터를 전달해야 하는데
모델을 전달하기 위해서 Model 클래스를 사용할 수 있다.
public String success(Model model){
	model.setAttribute("aa", "hi");
}
개발자는 Model 객체에 데이터를 담아서 DispatcherServlet에 전달할 수 있다.
DispatcherServlet에 전달된 Model데이터는 View에서 가공되어 클라이언트한테 응답처리 된다.

View
InternalResourceViewResolver가 적합한 뷰를 찾아주는 역할을 한다.
<beans:bean class = "org.springframework.web.servlet.view.InternalResourceViewResolver">
	<beans:property name = "prefix" value = "/WEB-INF/views/" />
	<beans:property name - "suffix" vlaue = ".jsp" />
</beans:bean>
만약 
@RequestMapping("/abc")
public String success(Model model){
	model.setAttribute("aa", "hi");
	return "zzz";
}
인 경우 WEB-INF/views 경로에 있는 zzz.jsp파일을 찾는다.

DispatcherServlet은 모든 jsp 파일을 검색하기 때문에 특정 확장자에 대해서는 따로 매핑을 해주어야 한다.
Servlet-context.xml 파일에는 <resources>태그가 있다.
<resources mapping="/resources/**" location="/resources/" />
location 속성에는 특정한 확장자가 있는 폴더이며
mapping은 확장자에 대한 전체 경로이다.
ex) <resources mapping = "/resources/first.html" location = "/resources/" />























